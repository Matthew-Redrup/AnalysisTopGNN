# https://nedbatchelder.com/blog/202209/making_a_coverage_badge.html

name: Building-AnalysisTopGNN
on:
    pull_request:
        branches:
            - "master"

        paths-ignore:
            - '**.md'
            - '**.txt'
 
    push:
        branches:
            - "master"

        paths-ignore:
            - '**.md'
            - '**.txt'
jobs:
    build:
        name: "Python ${{ matrix.python-version }} on ${{ matrix.os }} with ${{ matrix.cuda }}"
        runs-on: "${{ matrix.os }}"
        strategy: 
                max-parallel: 4
                fail-fast: false
                matrix:
                    os: 
                        - ubuntu-latest
                    python-version:
                        #- "3.7"
                        #- "3.8"
                        #- "3.9"
                        - "3.10"
                        #- "3.11"
                    cuda:
                        #- '11.8.0'
                        #- '11.7.1'
                        #- '11.7.0'
                        - 'cpu'
        steps:
            - name: "Checkout the repo"
              uses: "actions/checkout@v3"

            - name: "Config-CUDA"
              if: ${{ matrix.cuda != 'cpu' }}
              uses: Jimver/cuda-toolkit@v0.2.10
              id: cuda-toolkit
              with:
                    cuda: ${{ matrix.cuda }}

            - name: "Configuring Python - ${{ matrix.python-version }}"
              uses: "actions/setup-python@v4"
              with: 
                python-version: "${{ matrix.python-version }}"
                cache: 'pip'

            - name: "Installing dependencies"
              run: |
                python -m pip install --upgrade pip
                python -m pip install tox tox-gh-actions 

            - name: "AnalysisG-Install"
              run: pip install .
            
            - name: "Running using ${{ matrix.python-version }}"
              run: python -m tox

            - name: "Upload coverage"
              uses: actions/upload-artifact@v3
              with:
                name: covdata
                path: .coverage.*

            - name: "Purge this cache"
              uses: actions/github-script@v6
              with:
                script: |
                  console.log("About to clear")
                  const caches = await github.rest.actions.getActionsCacheList({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                  })
                  for (const cache of caches.data.actions_caches) {
                    console.log(cache)
                    github.rest.actions.deleteActionsCacheById({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      cache_id: cache.id,
                    })
                  }
                  console.log("Clear completed")

    coverage:
        name: Coverage
        needs: build
        runs-on: ubuntu-latest
        steps:
          - name: "Check out the repo"
            uses: "actions/checkout@v3"

          - name: "Set up Python"
            uses: "actions/setup-python@v4"
            with:
              python-version: "3.10"

          - name: "Install dependencies"
            run: |
              python -m pip install tox tox-gh-actions

          - name: "Download coverage data"
            uses: actions/download-artifact@v3
            with:
              name: covdata

          - name: "Combine"
            run: |
              python -m tox -e coverage
              export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
              echo "total=$TOTAL" >> $GITHUB_ENV
              echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

          - name: "Make badge"
            uses: schneegans/dynamic-badges-action@v1.4.0
            with:
              auth: ${{ secrets.GIST_TOKEN }}
              gistID: 6fee1eff8f987ac756a20133618659a1   # replace with your real Gist id.
              filename: covbadge.json
              label: Coverage
              message: ${{ env.total }}%
              minColorRange: 50
              maxColorRange: 90
              valColorRange: ${{ env.total }}


